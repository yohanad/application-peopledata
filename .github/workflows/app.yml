name: Application

on: 
  push:
    branches:
      - main
    # types:    
    #   - completed

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_APP }}
          aws-region: us-east-1
      - name: Checkout
        uses: actions/checkout@v3

# Change to this
# - name: Set up AWS CLI
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-west-1 # Change this to your desired AWS region


  image-deployment:
      permissions:
        id-token: write
        contents: read
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set timestamp
          id: set-timestamp
          run: echo "::set-output name=timestamp::$(date -u +%Y%m%d%H%M%S)"
        - name: Configure AWS Credentials
          id: config-credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            role-to-assume: ${{ secrets.AWS_ROLE_ARN_APP}}
            aws-region: us-east-1
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        - name: Get latest tag from ECR
          id: get-latest-tag
          run: |
            LATEST_TAG=$(aws ecr describe-images --repository-name bw-repository --query 'images[].imageTag' --output text | sort -V | tail -n 1)
            echo "::set-output name=latest_tag::$LATEST_TAG"
        - name: Generate new versioned tag
          id: generate-tag
          run: |
            LATEST_VERSION=${{ steps.get-latest-version.outputs.latest_version }}
            if [ -z "$LATEST_VERSION" ]; then
              NEW_TAG="v1"
            else
              # Extract the version number and increment it
              VERSION_NUMBER=$(echo "$LATEST_VERSION" | sed 's/v//')
              NEXT_VERSION=$((VERSION_NUMBER + 1))
              NEW_TAG="v$NEXT_VERSION"
            fi
            echo "::set-output name=new_tag::$NEW_TAG"
        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: "bw-repository"
          run: |
            TIMESTAMP=${{ steps.set-timestamp.outputs.timestamp }}
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.increment-tag.outputs.next_tag }}-$TIMESTAMP . 
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.increment-tag.outputs.next_tag }}-$TIMESTAMP





