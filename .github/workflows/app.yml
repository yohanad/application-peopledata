name: Application

on: 
  push:
    branches:
      - main
    # types:    
    #   - completed

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_APP }}
          aws-region: us-east-1
      - name: Checkout
        uses: actions/checkout@v3

# Change to this
# - name: Set up AWS CLI
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-west-1 # Change this to your desired AWS region


  image-deployment:
      permissions:
        id-token: write
        contents: read
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set timestamp
          id: set-timestamp
          run: echo "::set-output name=timestamp::$(date -u +%Y%m%d%H%M%S)"
        - name: Configure AWS Credentials
          id: config-credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            role-to-assume: ${{ secrets.AWS_ROLE_ARN_APP}}
            aws-region: us-east-1
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Get latest version from ECR
          id: get-latest-version
          run: |
            LATEST_TAG=$(  --query 'reverse(sort_by(imageDetails[?starts_with(imageTags[0], `APPCOOLNAME`)], &imagePushedAt))[0].imageTags[0]' --output text)
            echo "::set-output name=latest_tag::$LATEST_TAG"

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.8  # You can specify the Python version you need

        - name: Run Python script
          run: |
             echo 'APPCOOLNAMEv1-20231031225443'
             python -c "import re; import sys; print(re.search(r'v(\d+)', sys.stdin.read()).group(1))"

        # - name: Generate new versioned tag
        #   id: generate-tag
        #   run: |
        #     LATEST_VERSION=${{ steps.get-latest-version.outputs.latest_version }}
        #     if [ -z "$LATEST_VERSION" ]; then
        #       NEW_TAG="v1"
        #     else
        #       # Extract the version number and increment it
        #       VERSION_NUMBER=$(echo "$LATEST_VERSION" | sed 's/v//')
        #       NEXT_VERSION=$((VERSION_NUMBER + 1))
        #       NEW_TAG="v$NEXT_VERSION"
        #     fi
        #     echo "::set-output name=new_tag::$NEW_TAG"
        # - name: Build, tag, and push image to Amazon ECR
        #   id: build-image
        #   env:
        #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #     ECR_REPOSITORY: "bw-repository"
        #   run: |
        #     TIMESTAMP=${{ steps.set-timestamp.outputs.timestamp }}
        #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:APPCOOLNAME${{ steps.generate-tag.outputs.new_tag }}-$TIMESTAMP . 
        #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:APPCOOLNAME${{ steps.generate-tag.outputs.new_tag }}-$TIMESTAMP





